# coding=utf-8
from mongoengine import *
import datetime

class PlayerIndividualRound(EmbeddedDocument):
    round_number = IntField()
    par = IntField()
    throws = IntField()
    placement = IntField()
    round_rating = IntField()
    round_holes = IntField()
    course_name = StringField()
    course_par = IntField()
    course_length_ft = IntField()
    course_length_meters = IntField()
    dns = BooleanField(default=False)
    dnf = BooleanField(default=False)

class TournamentRound(EmbeddedDocument):
    division = StringField()
    round_number = IntField()
    avg_par = IntField()
    avg_throws = IntField()
    total_throws = IntField()
    avg_round_rating = IntField()
    round_holes = IntField()
    course_name = StringField()
    course_par = IntField()
    course_length_ft = IntField()
    course_length_meters = IntField()
    number_of_players = IntField()
    number_of_dns = IntField()
    number_of_dnf = IntField()

class TournamentPlayer(EmbeddedDocument):
    name = StringField()
    pdga_id = IntField()
    points = FloatField()
    total_throws = IntField()
    money_won = FloatField()
    placement = IntField()
    total_par = FloatField()
    avg_par = FloatField()
    avg_round_rating = FloatField()
    propagator = BooleanField()
    avg_placement = FloatField()
    division = StringField()
    dns = BooleanField(default=False)
    dnf = BooleanField(default=False)
    finished = BooleanField(default=True)
    rounds = ListField(EmbeddedDocumentField(PlayerIndividualRound))

class Player(Document):
    full_name = StringField(max_lenght=50, help_text="Full non parsed name")
    first_name = StringField(max_lenght=25, help_text="Parsed first name")
    last_name = StringField(max_lenght=25, help_text="Parsed last name")
    pdga_number = IntField(required=True, help_text="PDGA ID, used to check if player exists in DB")
    pdga_id_status = BooleanField(help_text="Field that tells if the PDGA number is in use or not. There are PDGA numbers between the players that not in use.")
    location_full = StringField(max_lenght=100, help_text="Full non parsed location")
    city = StringField(max_lenght=50, help_text="Parsed city information")
    state = StringField(max_lenght=50, help_text="Parsed state information")
    country = StringField(max_lenght=50, help_text="Parsed country information")
    classification = StringField(max_lenght=25, help_text="If player is pro/am")
    member_since = IntField(max_lenght=4, help_text="Year player registered to PDGA")
    membership_status = BooleanField(help_text="True = Active, False = Inactive. Active/Inactive/Special memberships ie. Eagle club. Special memberships stored in specific field")
    membership_status_expiration_date = DateTimeField(help_text="When the player membership ended. Tells the last year player has been active PDGA member")
    membership = StringField(help_text="Normal/birdie/eagle/ace. Store the special membership name here. Eagle/ace club and keep membership_status as inactive/active")
    current_rating = IntField(max_lenght=5, help_text="PDGA rating at the time of the crawling")
    highest_rating = IntField(max_lenght=5, help_text="Need to crawl highest rating from ratings history and make logic that updates the rating when crawling")
    lowest_rating = IntField(max_lenght=5, help_text="Need to crawl lowest rating and make logic that checks if current rating lower than lowest")
    rating_difference = IntField(max_lenght=5, help_text="Difference between 2 previous ratings, data from PDGA")
    latest_rating_update = DateTimeField(help_text="Date when rating was last updated. Format in PDGA is day-month-year")
    total_events = IntField(max_lenght=6, help_text="How many events player has attended, not sure if includes DNS/DNF tournaments also")
    total_wins = IntField(max_lenght=6, help_text="How many wins during whole PDGA career")
    certified_status = BooleanField(default=False, help_text="If player has done certification exam. Defaults to false as most people haven't done it")
    certified_status_expiration_date = DateTimeField(help_text="Certification lasts for around 3 years. Gives exact date when it expires")
    career_earnings = FloatField(help_text="Total earnings in dollars. Inflation not taken into account")
    individual_tournament_years = ListField(IntField(max_lenght=5), help_text="Checks on how many years player has played in tournaments. Player can be member for 20 years but only play once in a tournament. List that contains played years as int")
    pdga_page_link = URLField(help_text="Direct link to PDGA page. Link could be also generated from the ID")
    played_event_ids = ListField(IntField(max_lenght=10), help_text="All pdga events have own IDs, collect the tournament IDs here where the player has participated.")
    played_countries = ListField(StringField(max_lenght=50), help_text="Fun additional info. Collect all countries where the player has played. Make a list that contains individual countries.")
    first_crawl_date = DateTimeField(default=datetime.datetime.now, help_text="Data should be given when crawling, but if it isn't then defaults to datetime now")
    latest_update = DateTimeField(default=datetime.datetime.now, help_text="Should be given when parsed, but if not given gives datetime now")
    fields_updated = ListField(DynamicField(), help_text="If player exists and is recrawled, what data was changed. Dict that contains dynamic data about the fields that were changed and also datetime when it was updated")
    meta = {
	   'indexes': [
            {'fields': ['pdga_number'], 'unique': True},
       ]
    }

class Tournament(Document):
    tournament_name = StringField(help_text="Tournament name displayed on PDGA page")
    tournament_id = IntField(help_text="Tournament ID on PDGA")
    total_players = IntField(help_text="Total number of players who participated on the event")
    tournament_start = DateTimeField(help_text="Start date of the tournament")
    tournament_end = DateTimeField(help_text="End date of the tournament")
    tournament_lenght = IntField(help_text="Number of days the tournament was")
    location_full = StringField(max_lenght=100, help_text="Unparsed location of the tournament")
    location_city = StringField(max_lenght=50, help_text="Parsed city from the full location")
    location_state = StringField(max_lenght=50, help_text="Parsed state from the full location")
    location_country = StringField(max_lenght=50, help_text="Parsed country from the full location")
    tournament_director = StringField(help_text="Full name of the tournament or league director")
    tournament_director_id = StringField(help_text="If the tournament director is a pdga member when their PDGA ID can be found")
    tournament_phone = StringField(help_text="This is assumed to be the TD phone number but can be a general number for the tournament")
    tournament_email = StringField(help_text="This is assumed to be the TD email but can be a general email for the tournament")
    assistant_director = StringField(help_text="Assistant tournament or league director full name if available")
    assistant_director_id = StringField(help_text="If assistant director is PDGA member their ID should be on the PDGA page")
    tournament_website = URLField(help_text="Direct link to the tournament website")
    pdga_page_link = URLField(help_text="Direct link to the tournament PDGA page")
    tournament_tier = StringField(help_text="PDGA tournament ranking system from highest to lowest, Major, NT, A, B, C, X, L")
    tournament_classification = StringField(help_text="Tells what divisions are available in the tournament. Pro-Am, Pro, Am")
    pro_prize_money = FloatField(help_text="Prize pool available for the pro division. AM division can't receive price money")
    avg_total_player_par = IntField(help_text="Avg par calculated by adding together the par results of all players who finished and dividing it by number of players")
    avg_player_rating = IntField(help_text="Avg PDGA rating calculated based on the ratings of the players during the tournament and dividing it by the number of players")
    avg_total_round_rating = IntField(help_text="Check the avg round rating of all players if available and divide it by the number of rounds and number of players")
    avg_money_per_player = FloatField(help_text="Calculate the avg prize money per player by getting the total pro prize pool and dividing it by the number of players in the pro division")
    rounds = ListField(EmbeddedDocumentField(TournamentRound), help_text="More indepth data about individual rounds played in the tournament.")
    players = ListField(EmbeddedDocumentField(TournamentPlayer), help_text="More indepth data about the individual players in the tournament.")
    first_crawl_date = DateTimeField(default=datetime.datetime.now, help_text="Data should be given when crawling, but if it isn't then defaults to datetime now")
    latest_update = DateTimeField(default=datetime.datetime.now, help_text="Should be given when parsed, but if not given gives datetime now")
    fields_updated = ListField(DynamicField(), help_text="If player exists and is recrawled, what data was changed. Dict that contains dynamic data about the fields that were changed and also datetime when it was updated")
    pdga_latest_update = DateTimeField(help_text="Get the date (and time) when the tournament info was last updated or sent to PDGA. Original format in 13-Oct-2019 22:29:25 UTC")
    hole_by_hole_scoring = BooleanField(help_text="Check if hole-by-hole scoring is available on the page by PDGA or Udisc")
    event_results_status = StringField(default="Event report received. Official ratings approved.", help_text="If result report status is availabe crawl it. Unless give the status as ratings are official. Need logic so that upcoming events don't get ratings approved data.")
    meta = {
	   'indexes': [
            {'fields': ['tournament_id'], 'unique': True},
       ]
    }
